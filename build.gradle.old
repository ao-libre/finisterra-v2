buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }

    dependencies {
        classpath "net.onedaybeard.artemis:artemis-odb-gradle-plugin:2.3.0"
        classpath "net.onedaybeard.artemis:artemis-fluid-gradle-plugin:2.3.0"
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'Finisterra'
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    ext {
        appName = 'Finisterra'
        artemisVersion = '2.3.0'
        localArc = {
            return !project.hasProperty("release") && new File(projectDir.parent, '../Arc').exists()
        }

        arcModule = { String name ->
            if (localArc()) {
                return project(":Arc:$name")
            } else {
                //skip to last submodule
                if (name.contains(':')) name = name.split(':').last()
                return "com.github.Anuken.Arc:$name:${getArcHash()}"
            }
        }
    }
}

subprojects {
    version = '0.0.1-SNAPSHOT'
    ext.appName = 'finisterra'
    apply plugin: 'java-library'
    sourceSets.main.java.srcDirs = ['main']
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    compileJava {
        options.incremental = true
    }

// Configuraciones del compilador Java
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        //options.compilerArgs << '-Xlint:unchecked'
        //options.deprecation = true
    }

}
import org.gradle.internal.jvm.Jvm

configure(subprojects.findAll { it.name == 'server' || it.name == 'client' }) {

    ext {
        prebuiltJRE = "${project.buildDir}/bundled-JRE"
        jdkPath = Jvm.current().getJavaHome().path
        JPackagePath = "/Users/guidota/Documents/jdks/jdk-15.0.1.jdk/Contents/Home/bin/jpackage"
    }

    // creates a replacement runtime via jlink command (much smaller than JPackage. Up to 38MB)
    task jlink(type: Exec) {

        commandLine = [
                jdkPath.concat("/bin/jlink"),
                '--module-path', jdkPath.concat("/jmods"),
                '--add-modules', 'java.base,jdk.unsupported',
                '--strip-debug',
                '--no-header-files',
                '--no-man-pages',
                '--strip-native-commands',
                '--vm=server',
                '--compress=2',
                '--output', prebuiltJRE
        ] as List<String>

        doLast {
            // Some extra debloat.
            delete(file("${prebuiltJRE}/conf"))
            delete(file("${prebuiltJRE}/legal"))
            delete fileTree("${prebuiltJRE}/bin").matching { include "api*.dll" }
        }
    }

    jlink.onlyIf { !file(prebuiltJRE).exists() }

}