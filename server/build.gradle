plugins {
    id 'application'
    id 'artemis'
    id 'artemis-fluid'
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id 'org.mikeneck.graalvm-native-image' version 'v1.0.0'
}

mainClassName = 'Launcher'
eclipse.project.name = appName + '-server'

dependencies {
    api group: "net.onedaybeard.artemis", name: "artemis-odb", version: "$artemisVersion"
    api 'com.google.code.gson:gson:2.8.6'
    api "net.onedaybeard.artemis:artemis-fluid-core:2.4.0-SNAPSHOT"
    api project(':shared')
    implementation project(':server:components')
    implementation project(':shared:shared-components')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

test {
    useJUnitPlatform()
}

ext {
    fluidOutputDir = file("$buildDir/generated-sources/fluid/")
}

sourceSets {
    main.java.srcDirs = ['main', fluidOutputDir, project(':server:components').file('server'), project(':shared:shared-components').file('shared')]
    main.resources.srcDirs = ['resources']
    test.java.srcDirs += ['test', 'main']
}

fluid {
    generatedSourcesDirectory = fluidOutputDir
    classpath = sourceSets.main.compileClasspath
}
compileJava.dependsOn fluid

weave {
    classesDir = sourceSets.main.java.outputDir
    dependsOn build
    enableArtemisPlugin = true
    enablePooledWeaving = true
    generateLinkMutators = true
    optimizeEntitySystems = true
}
classes.finalizedBy(weave)
// Help intellIJ pick up the generated classes.
idea {
    module {
        generatedSourceDirs += fluidOutputDir
        excludeDirs -= file("$buildDir")
        excludeDirs -= file("$buildDir/src")
        excludeDirs += file("$buildDir/dependency-cache")
        excludeDirs += file("$buildDir/libs")
        excludeDirs += file("$buildDir/tmp")
    }
}

nativeImage {
    graalVmHome = System.getProperty('java.home')
    mainClass = 'Launcher'
    classpath = shadowJar
    executableName = 'finisterra-server'
    outputDirectory = file("$buildDir/bin")
    arguments {
        add '--no-fallback'
        add '--enable-all-security-services'
        add '--report-unsupported-elements-at-runtime'
        add '-H:ReflectionConfigurationFiles=./resources/reflect-config.json'
    }
}