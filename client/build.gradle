plugins {
    id 'application'
    id "artemis"
    id "artemis-fluid"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id 'org.mikeneck.graalvm-native-image' version 'v1.0.0'
}

dependencies {
    api project(':client:components')
    api project(':shared:shared-components')
    implementation project(':shared')
    implementation "net.onedaybeard.artemis:artemis-odb:$artemisVersion"
    implementation "net.onedaybeard.artemis:artemis-fluid-core:$artemisVersion"
    api arcModule("arc-core")
    implementation arcModule("backends:backend-sdl")
    implementation arcModule("natives:natives-desktop")
}

ext {
    fluidOutputDir = file("$buildDir/generated-sources/fluid/")
}
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceSets.main.resources.srcDirs += ['resources', rootProject.file('assets').path]
sourceSets.main.java.srcDirs = ['main', fluidOutputDir]

eclipse.project.name = appName + '-client'

mainClassName = 'Launcher'

// artemis-odb: weaving settings.
weave {
    classesDir = new File(buildDir, "classes/java/main")
    enableArtemisPlugin = true
    enablePooledWeaving = true
    generateLinkMutators = true
    optimizeEntitySystems = true
}

fluid {
    generatedSourcesDirectory = fluidOutputDir
    classpath = sourceSets.main.compileClasspath
    preferences.excludeFromClasspath += [
            "natives-",
    ]
}
fluid.dependsOn(':shared:classes')
compileJava.dependsOn fluid
classes.finalizedBy weave

import org.gradle.internal.os.OperatingSystem


// Get current Operating System
def OS = OperatingSystem.current()

if (OS.isMacOsX()) {
    run {
        jvmArgs += '-XstartOnFirstThread'
    }
}

project.ext.weaveDir = new File("$buildDir/explodedForWeave")

task explodeForWeave(type: Sync, dependsOn: classes) {
    into project.weaveDir
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
}

weave {
    classesDir = sourceSets.main.java.outputDir
    dependsOn explodeForWeave
    enableArtemisPlugin = true
    enablePooledWeaving = true
    generateLinkMutators = true
    optimizeEntitySystems = true
}

run {
    workingDir = rootProject.file('assets').path
    setIgnoreExitValue(true)

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run LWJGL3 Java apps on MacOS
        jvmArgs += "-XstartOnFirstThread"
    }
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

runShadow {
//	workingDir = rootProject.file('assets').path
//	setIgnoreExitValue(true)
//
    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run LWJGL3 Java apps on MacOS
        jvmArgs += "-XstartOnFirstThread"
    }
//	jvmArgs += "-agentlib:native-image-agent=config-output-dir=resources/"
//	main = project.mainClassName
//	classpath = sourceSets.main.runtimeClasspath
//	standardInput = System.in
}

task dist(type: Jar) {
    dependsOn classes
    from files(sourceSets.main.output.classesDirs)

    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    doLast {
        copy {
            from configurations.compileClasspath
            into("$buildDir/libs")
        }
    }
}

run.dependsOn(classes)

// Determine where the bundled application is going to be.
def releasePath = "${buildDir}/releases"

// creates application bundle (executable + runtime)
task bundle(type: Exec, dependsOn: [dist, jlink]) {

    // Overwrite previous bundled application.
    if (file(releasePath).exists()) {
        delete(file(releasePath))
    } else {
        file(releasePath).mkdirs()
    }

    def commands = [
            JPackagePath,
            '--type', 'app-image',
            '--name', project.appName,
            '--vendor', "Argentum Online Libre",
            '--app-version', "1.15.0",
            '--dest', releasePath,
            '--runtime-image', prebuiltJRE,
            '--input', "${buildDir}/libs",
            '--main-class', project.mainClassName,
            '--main-jar', "${project.name}-${project.version}.jar"
    ]

    switch (OS) {
        case OperatingSystem.MAC_OS:
            commands << "--java-options"
            commands << "-XstartOnFirstThread"
            break
        case OperatingSystem.WINDOWS:
            break
        case OperatingSystem.LINUX:
            break
    }

    commandLine = commands

}

task packageDistribution(type: Zip, dependsOn: [bundle]) {
    archiveFileName = "finisterra-client-".concat((OS.isMacOsX() ? "MacOS" : OS.isLinux() ? "Linux" : "Windows")).concat(".zip")
    destinationDirectory = file("${project.buildDir}/releases/")

    from "${releasePath}/${project.appName}".concat(OS.isMacOsX() ? ".app" : "")
}

nativeImage {
    graalVmHome = System.getProperty('java.home')
    mainClass = 'Launcher'
    classpath = shadowJar
    executableName = 'finisterra-client'
    outputDirectory = file("$buildDir/bin")
    arguments {
        if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
            add '-J-XstartOnFirstThread'
        }
        add '--no-fallback'
        add '--enable-all-security-services'
        add '--report-unsupported-elements-at-runtime'
        add '-H:ConfigurationResourceRoots=native-image/'
        add '-H:+PrintClassInitialization'
        add '-H:+ReportExceptionStackTraces'
        add '-H:GenerateDebugInfo=1'
        add '-H:+AllowVMInspection'
        add '--native-image-info'
        add '--verbose'
        add '--trace-class-initialization=org.lwjgl.*'
//        add '--initialize-at-run-time=org.lwjgl,org.lwjgl.system,org.lwjgl.opengl,com.badlogic.gdx.backends.lwjgl3,org.lwjgl.system.MemoryUtil,org.lwjgl.opengl.GL$1,org.lwjgl.opengl.GL$2,org.lwjgl.opengl.GL$3,org.lwjgl.opengl.GL$ICD,org.lwjgl.opengl.GLCapabilities,org.lwjgl.opengl.GLUtil,org.lwjgl.openal.AL,org.lwjgl.openal.ALC,org.lwjgl.openal.AL$ICDStatic,org.lwjgl.openal.AL$ICDStatic$WriteOnce,org.lwjgl.opengl.NVTextureBarrier,org.lwjgl.opengl.NVShaderBufferLoad,org.lwjgl.opengl.NVSampleLocations,org.lwjgl.opengl.NVQueryResourceTag,org.lwjgl.system.macosx.CoreFoundation,org.lwjgl.system.windows.WindowsLibrary,org.lwjgl.openal.AL$WriteOnce,org.lwjgl.system.ThreadLocalUtil,com.badlogic.gdx.backends.lwjgl3.audio.OpenALAudio,org.lwjgl.opengl.GL,org.lwjgl.opengl.GL$SharedLibraryGL,org.lwjgl.system.Callback,org.lwjgl.system.Callback$B,org.lwjgl.system.Callback$D,org.lwjgl.system.Callback$F,org.lwjgl.system.Callback$I,org.lwjgl.system.Callback$J,org.lwjgl.system.Callback$N,org.lwjgl.system.Callback$P,org.lwjgl.system.Callback$S,org.lwjgl.system.Callback$V,org.lwjgl.system.Callback$Z'
        add '--initialize-at-run-time=org.lwjgl,org.lwjgl.glfw,org.lwjgl.opengl,org.lwjgl.system,org.lwjgl.opengl.GL$SharedLibraryGL,org.lwjgl.system.MemoryUtil$MemoryAllocator,org.lwjgl.system.SharedLibraryLoader,org.lwjgl.system.SharedLibrary,com.badlogic.gdx.backends.lwjgl3,com.badlogic.gdx.backends.lwjgl3.Lwjgl3Window,org.lwjgl.system.MemoryUtil$1,org.lwjgl.system.MemoryUtil$2,org.lwjgl.system.MemoryManage'
    }
}
